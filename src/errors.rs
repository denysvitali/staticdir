//! This module imports errors generated by `StaticDir` and which are provided as response to following Iron middlewares.

use std::error::Error;
use std::fmt;
use std::io;

use iron::status::Status;
use iron::prelude::IronError;

/// Generated when target entry is not a directory, i.e. a file or symlink.
#[derive(Debug)]
pub struct NotADir;

impl Error for NotADir {
    fn description(&self) -> &str { "Requested entry is file" }
}

impl fmt::Display for NotADir {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str(self.description())
    }
}


#[inline]
pub fn status_by_err_code(err: &io::Error) -> Status {
    const NOT_A_DIR_STATUS_CODE: i32 = 20;

    match err.raw_os_error() {
        Some(NOT_A_DIR_STATUS_CODE) => Status::NotFound,
        _                           => Status::InternalServerError,
    }
}

/// Maps `std::io::Error` to `iron::prelude::IronError`.
#[inline]
pub fn io_to_iron(err: io::Error) -> IronError {
    let status = match err.kind() {

        io::ErrorKind::NotFound         => Status::NotFound,
        io::ErrorKind::PermissionDenied => Status::Forbidden,
        io::ErrorKind::Other            => status_by_err_code(&err),
        _                               => Status::InternalServerError,
    };
    IronError::new(err, status)
}

/// Generated when failed to convert `OsString` to `String`
#[derive(Debug)]
pub struct BadString {
    desc: String,
}

impl BadString {
    pub fn new(desc: &str) -> BadString {
        BadString{ desc: desc.into() }
    }
}

impl Error for BadString {
    fn description(&self) -> &str { &self.desc }
}

impl fmt::Display for BadString {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str(self.description())
    }
}
